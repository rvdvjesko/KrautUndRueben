 -- ------------------------------------- Stored Prodedures -------------------------------------
 
 -- 1. Anhand der Kunden ID alle Bestellungen mit aufgelisteten Zutaten abrufen
 
DELIMITER $$

CREATE PROCEDURE Bestellung_Liste(IN kundeID int)
BEGIN
	SELECT b.bestellung_id, b.bestelldatum, k.vorname, k.nachname, b.rechnungsbetrag, z.zutatname
	from bestellung b 
	join bestellung_enthält_zutat bez 
	on bez.bestellung_id = b.bestellung_id 
	join zutat z 
	on z.zutat_id = bez.zutat_id
	join kunde k 
	on k.kunde_id = b.kunde_id 
	where b.kunde_id = kundeID;
END;
$$

DELIMITER ;


call Bestellung_Liste(2002);



 -- 2. Persönliche Daten eines Kunden löschen

DELIMITER //
create procedure delete_kunde (in id int)
 begin
  update Kunde
        set Kunde.Vorname = null,
        Kunde.Nachname = null,
        Kunde.Geburtsdatum = null,
        Kunde.Straße = null,
        Kunde.Hausnummer = null,
	Kunde.Postleitzahl = null,
        Kunde.Ort = null,
        Kunde.Telefon = null,
        Kunde.email = null,
        Kunde.Vorname = null
        where Kunde.Kunde_ID = id;

 end;
//

DELIMITER ;

call delete_kunde(2001);



 -- 3. Auskunft eines Kunden

DELIMITER $$

CREATE PROCEDURE auskunft_kunde(IN id int)
BEGIN
	select * from Kunde k
	where k.kunde_id = id;
END;
$$

DELIMITER ;


call auskunft_kunde(2009);




-- ------------------------------------- Trigger -------------------------------------

-- 1. Wenn der Preis einer Zutat geändert wird, wird ein Logeintrag erstellt

create table preisentwicklung_zutat (
	log_id int Primary Key AUTO_INCREMENT NOT NULL,
	zutatname varchar(25),
	preis_vorher decimal(5,2),
	preis_nachher decimal(5,2),
	Datum timestamp
);

DELIMITER $$ 


CREATE TRIGGER preisentwicklung_zutaten AFTER UPDATE 
	ON zutat 
	FOR EACH ROW 
	BEGIN 
	IF (new.nettopreis <> old.nettopreis) THEN
	INSERT INTO preisentwicklung_zutat (zutatname, preis_vorher, preis_nachher, Datum) VALUES (OLD.zutatname, OLD.nettopreis, NEW.nettopreis, NOW());
	END IF;
	END; $$

DELIMITER ;


 -- ---- Beispiel eines Updates ---

UPDATE Zutat
SET nettopreis = 0.19
WHERE zutat_id = 1002;

select * from preisentwicklung_zutat;




-- 2. Dieser Trigger überprüft nach dem Löschen der personenbezogenen Daten aus der Tabelle 'Kunden', 
-- dass diese Einträge auch wirklich leer sind und speichert das Ergebnis in die Tabelle 'gelöschte_kundendaten'

create table gelöschte_kundendaten (
	Kunden_ID int,
	Daten_gelöscht varchar(3),
	Datum timestamp
);

DELIMITER $$ 

CREATE TRIGGER gelöschte_kundendaten AFTER UPDATE 
	ON kunde 
	FOR EACH ROW 
	BEGIN 
	IF (new.vorname IS null and new.nachname IS null and new.geburtsdatum IS null and new.straße IS null and new.hausnummer IS null and new.postleitzahl IS null and new.ort IS null and new.telefon IS null and new.email IS null) THEN
	INSERT INTO gelöschte_kundendaten(Kunden_ID, Daten_gelöscht, Datum) VALUES(new.kunde_id, 'YES', NOW());
	ELSE
	INSERT INTO gelöschte_kundendaten(Kunden_ID, Daten_gelöscht, Datum) VALUES(new.kunde_id, 'NO', NOW());
	END IF;
	END; $$

DELIMITER ;




-- ------------------------------------- View -------------------------------------

-- Welche Zutat wird aktuell von welchem Lieferant geliefert

CREATE OR REPLACE VIEW zutat_lieferant AS
select z.Zutatname, l.Lieferantenname
from Zutat z
join lieferant_liefert_zutat llz
on  z.Zutat_ID = llz.Zutat_ID
join lieferant l
on llz.Lieferant_ID = l.Lieferant_ID;

select * from zutat_lieferant;



-- Versanddaten für Versandunternehmen (damit nicht alle, sondern nur lediglich die für den Versand relevanten Kundendaten gesehen werden können)

CREATE OR REPLACE VIEW daten_für_versandunternehmen AS
SELECT b.bestellung_id, k.Vorname, k.Nachname, k.Straße, k.Hausnummer, k.Postleitzahl, k.Ort, k.Email
FROM bestellung b
JOIN kunde k 
ON b.kunde_id = k.kunde_id
ORDER BY bestellung_id;

SELECT * FROM daten_für_versandunternehmen
where bestellung_id = 8;
